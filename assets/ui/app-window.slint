import { Button, VerticalBox, HorizontalBox, ListView, LineEdit, ScrollView, Spinner, ComboBox } from "std-widgets.slint";

struct FileInfo {
    name: string,
    size: string,
    path: string,
    id: string,
}

component InfoPopup inherits Rectangle {
    callback close();
    in property <string> version: "0.1.0";
    in property <string> theme: "light";
    
    property <color> bg-color: theme == "dark" ? #2b2b2b : #ffffff;
    property <color> text-color: theme == "dark" ? #ffffff : #000000;
    property <color> subtitle-color: theme == "dark" ? #cccccc : #333333;
    
    width: 400px;
    height: 300px;
    background: bg-color;
    border-radius: 8px;
    drop-shadow-color: #00000088;
    drop-shadow-offset-x: 0px;
    drop-shadow-offset-y: 2px;
    drop-shadow-blur: 10px;

    VerticalBox {
        padding: 20px;
        spacing: 16px;

        Text {
            text: "About JusTrans";
            font-size: 24px;
            font-weight: 700;
            horizontal-alignment: center;
            color: text-color;
        }

        VerticalBox {
            spacing: 12px;
            Text {
                text: "JusTrans is a simple file transfer tool that allows you to easily share files between devices on the same network.";
                wrap: word-wrap;
                font-size: 14px;
                color: text-color;
            }

            Text {
                text: "Features:";
                font-weight: 600;
                font-size: 14px;
                color: subtitle-color;
            }

            Text {
                text: "• Easy file sharing via web browser\n• QR code for quick access\n• Simple and intuitive interface\n• Cross-platform support";
                font-size: 14px;
                color: text-color;
            }

            Text {
                text: "Version: " + root.version;
                font-size: 14px;
                font-weight: 500;
                color: text-color;
            }
        }

        HorizontalBox {
            alignment: center;
            Button {
                text: "Close";
                clicked => {
                    root.close();
                }
            }
        }
    }
}

component ConfigDialog inherits Rectangle {
    callback close();
    callback save-config(int, int, string, string);

    // Server config
    in property <int> initial-server-port: 8080;
    in property <int> initial-upload-chunk-size-mb: 5;

    // Display config
    in property <string> initial-theme: "light";

    // Storage config
    in property <string> initial-storage-dir: "uploads";

    // Internal properties
    property <int> server-port: root.initial-server-port;
    property <int> upload-chunk-size-mb: root.initial-upload-chunk-size-mb;
    property <string> theme: root.initial-theme;
    property <string> storage-dir: root.initial-storage-dir;
    
    // Theme colors
    property <color> bg-color: theme == "dark" ? #2b2b2b : #ffffff;
    property <color> text-color: theme == "dark" ? #ffffff : #000000;
    property <color> subtitle-color: theme == "dark" ? #cccccc : #333333;
    property <color> theme-border-color: theme == "dark" ? #555555 : #dddddd;
    property <color> section-border-color: theme == "dark" ? #444444 : #dddddd;
    property <color> hint-color: theme == "dark" ? #999999 : #666666;

    width: 500px;
    height: 450px;
    background: bg-color;
    border-radius: 8px;
    drop-shadow-color: #00000088;
    drop-shadow-offset-x: 0px;
    drop-shadow-offset-y: 2px;
    drop-shadow-blur: 10px;

    VerticalBox {
        padding: 20px;
        spacing: 16px;

        Text {
            text: "Settings";
            font-size: 24px;
            font-weight: 700;
            horizontal-alignment: center;
            color: text-color;
        }

        ScrollView {
            VerticalBox {
                spacing: 24px;
                
                // Server Configuration Section
                VerticalBox {
                    spacing: 12px;
                    Text {
                        text: "Server Configuration";
                        font-size: 18px;
                        font-weight: 600;
                        color: subtitle-color;
                    }

                    Rectangle {
                        height: 1px;
                        background: section-border-color;
                    }

                    VerticalBox {
                        spacing: 12px;

                        // Server Port
                        VerticalBox {
                            spacing: 6px;
                            Text {
                                text: "Server Port:";
                                font-weight: 500;
                                font-size: 14px;
                                color: text-color;
                            }
                            LineEdit {
                                text: root.server-port;
                                placeholder-text: "Enter port number (e.g., 8080)";
                                input-type: number;
                                edited(text) => {
                                    root.server-port = text.to-float();
                                }
                            }
                            Text {
                                text: "Choose a port between 1024-65535. Default is 8080.";
                                font-size: 12px;
                                color: hint-color;
                            }
                        }

                        // Upload Chunk Size
                        VerticalBox {
                            spacing: 6px;
                            Text {
                                text: "Upload Chunk Size (MB):";
                                font-weight: 500;
                                font-size: 14px;
                                color: text-color;
                            }
                            LineEdit {
                                text: root.upload-chunk-size-mb;
                                placeholder-text: "Enter chunk size in MB (e.g., 5)";
                                input-type: number;
                                edited(text) => {
                                    root.upload-chunk-size-mb = text.to-float();
                                }
                            }
                            Text {
                                text: "Size of file chunks during upload. Larger values may improve performance for big files.";
                                font-size: 12px;
                                color: hint-color;
                            }
                        }
                    }
                }

                // Display Configuration Section
                VerticalBox {
                    spacing: 12px;
                    Text {
                        text: "Display Configuration";
                        font-size: 18px;
                        font-weight: 600;
                        color: subtitle-color;
                    }

                    Rectangle {
                        height: 1px;
                        background: section-border-color;
                    }

                    VerticalBox {
                        spacing: 12px;

                        // Theme Selection
                        VerticalBox {
                            spacing: 6px;
                            Text {
                                text: "Theme:";
                                font-weight: 500;
                                font-size: 14px;
                                color: text-color;
                            }
                            ComboBox {
                                model: ["light", "dark"];
                                current-value: root.theme;
                                selected(value) => {
                                    root.theme = value;
                                }
                            }
                            Text {
                                text: "Choose between light and dark theme for the application.";
                                font-size: 12px;
                                color: hint-color;
                            }
                        }
                    }
                }

                // Storage Configuration Section
                VerticalBox {
                    spacing: 12px;
                    Text {
                        text: "Storage Configuration";
                        font-size: 18px;
                        font-weight: 600;
                        color: subtitle-color;
                    }

                    Rectangle {
                        height: 1px;
                        background: section-border-color;
                    }

                    VerticalBox {
                        spacing: 12px;

                        // Storage Directory
                        VerticalBox {
                            spacing: 6px;
                            Text {
                                text: "Storage Directory:";
                                font-weight: 500;
                                font-size: 14px;
                                color: text-color;
                            }
                            LineEdit {
                                text: root.storage-dir;
                                placeholder-text: "Enter storage directory path";
                                edited(text) => {
                                    root.storage-dir = text;
                                }
                            }
                            Text {
                                text: "Directory where uploaded files will be stored.";
                                font-size: 12px;
                                color: hint-color;
                            }
                        }
                    }
                }
            }
        }

        HorizontalBox {
            alignment: center;
            spacing: 12px;
            Button {
                text: "Close";
                clicked => {
                    root.close();
                }
            }
            Button {
                text: "Save";
                clicked => {
                    root.save-config(
                        root.server-port,
                        root.upload-chunk-size-mb,
                        root.theme,
                        root.storage-dir
                    );
                    root.close();
                }
            }
        }
    }
}

export component AppWindow inherits Window {
    title: "JusTrans - File Exchange";
    min-width: 500px;
    min-height: 600px;
    max-width: 500px;
    max-height: 600px;
    
    // Properties
    in-out property <string> server-url: "http://192.168.1.100:8080";
    in-out property <[FileInfo]> files: [];
    in-out property <int> selected-file: -1;
    in-out property <bool> server-running: false;
    in-out property <string> status-message: "Server not running";
    in-out property <bool> is-loading: false;
    in-out property <bool> show-info: false;
    in-out property <bool> show-config: false;
    in-out property <string> version: "0.1.0";
    
    // Configuration properties
    in-out property <int> config-server-port: 8080;
    in-out property <int> config-upload-chunk-size-mb: 5;
    in-out property <string> config-theme: "light";
    in-out property <string> config-storage-dir: "uploads";
    
    // Theme colors
    property <color> bg-color: config-theme == "dark" ? #1e1e1e : #ffffff;
    property <color> text-color: config-theme == "dark" ? #ffffff : #000000;
    property <color> url-color: config-theme == "dark" ? #4dabf7 : #0066cc;
    property <color> theme-border-color: config-theme == "dark" ? #555555 : #dddddd;
    property <color> button-bg: config-theme == "dark" ? #404040 : #f5f5f5;
    property <color> button-hover-bg: config-theme == "dark" ? #505050 : #e0e0e0;
    property <color> hint-color: config-theme == "dark" ? #999999 : #888888;
    property <color> qr-bg: config-theme == "dark" ? #2b2b2b : #ffffff;
    
    background: bg-color;
    
    // Callbacks
    callback start-server();
    callback stop-server();
    callback add-files();
    callback remove-file(int);
    callback open-file(int);
    callback download-file(int);
    callback copy-url();
    callback refresh-files();
    callback open-url();
    callback save-config(int, int, string, string);
    pure callback render-qr() -> image;

    VerticalBox {
        padding: 20px;
        spacing: 20px;
        
        // URL section with info button
        Rectangle {
            height: 60px;
            HorizontalBox {
                spacing: 10px;
                Rectangle {
                    border-width: 1px;
                    border-color: theme-border-color;
                    border-radius: 8px;
                    horizontal-stretch: 1;
                    background: qr-bg;
                    HorizontalBox {
                        padding: 10px;
                        Text {
                            text: root.server-url;
                            font-size: 18px;
                            color: url-color;
                            font-weight: 500;
                            vertical-alignment: center;
                            horizontal-stretch: 1;
                        }
                    }

                    TouchArea {
                        mouse-cursor: MouseCursor.default;
                        clicked => {
                            root.open-url();
                        }
                    }
                }

                // Info button
                Rectangle {
                    width: 40px;
                    height: 40px;
                    border-radius: 20px;
                    background: button-bg;
                    border-width: 1px;
                    border-color: theme-border-color;
                    y: (parent.height - self.height) / 2;

                    Image {
                        source: @image-url("../img/info.svg");
                        colorize: config-theme == "dark" ? #4dabf7 : #62B1DF;
                        width: 24px;
                        height: 24px;
                        x: (parent.width - self.width) / 2;
                        y: (parent.height - self.height) / 2;
                    }

                    TouchArea {
                        mouse-cursor: pointer;
                        clicked => {
                            root.show-info = true;
                        }
                    }

                    states [
                        hover when root.show-info: {
                            background: button-hover-bg;
                        }
                    ]
                }

                // Config button
                Rectangle {
                    width: 40px;
                    height: 40px;
                    border-radius: 20px;
                    background: button-bg;
                    border-width: 1px;
                    border-color: theme-border-color;
                    y: (parent.height - self.height) / 2;

                    Image {
                        source: @image-url("../img/settings.svg");
                        colorize: config-theme == "dark" ? #ffffff : #000000;
                        width: 24px;
                        height: 24px;
                        x: (parent.width - self.width) / 2;
                        y: (parent.height - self.height) / 2;
                    }

                    TouchArea {
                        mouse-cursor: pointer;
                        clicked => {
                            root.show-config = true;
                        }
                    }

                    states [
                        hover when root.show-config: {
                            background: button-hover-bg;
                        }
                    ]
                }
            }
        }
        
        // QR Code Area
        Rectangle {
            height: 300px;
            border-width: 1px;
            border-color: theme-border-color;
            border-radius: 8px;
            background: qr-bg;
            if (root.server-running): VerticalBox {
                alignment: center;
                Image {
                    source: render-qr();
                    image-fit: contain;
                }
            }
            if (!root.server-running): VerticalBox {
                alignment: center;
                Text {
                    text: "QR Code will appear here";
                    color: hint-color;
                    font-size: 16px;
                    horizontal-alignment: center;
                }
            }
        }
        
        // Start Button
        Rectangle {
            height: 120px;
            Rectangle {
                width: 120px;
                height: 120px;
                border-radius: 60px;
                border-width: 2px;
                border-color: #ddd;
                background: root.server-running ? #f44336 : #4caf50;
                x: parent.width / 2 - self.width / 2;
                y: 0;
                Text {
                    text: root.server-running ? "Stop" : "Start";
                    color: white;
                    font-size: 32px;
                    font-weight: 700;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                }

                TouchArea {
                    clicked => {
                        if (root.server-running) {
                            root.stop-server();
                        } else {
                            root.start-server();
                        }
                    }
                }
            }
        }
        
        // Status text
        if (root.is-loading || root.server-running): Text {
            text: root.status-message;
            horizontal-alignment: center;
            color: root.server-running ? #4caf50 : #f44336;
            font-size: 14px;
        }
    }

    // Info popup
    if (root.show-info): Rectangle {
        background: #00000088;
        width: 100%;
        height: 100%;

        TouchArea {
            width: 100%;
            height: 100%;
            clicked => {
                root.show-info = false;
            }
        }

        InfoPopup {
            x: (parent.width - self.width) / 2;
            y: (parent.height - self.height) / 2;
            version: root.version;
            theme: root.config-theme;
            close => {
                root.show-info = false;
            }
        }
    }

    // Config popup
    if (root.show-config): Rectangle {
        background: #00000088;
        width: 100%;
        height: 100%;

        ConfigDialog {
            x: (parent.width - self.width) / 2;
            y: (parent.height - self.height) / 2;
            
            // Server config
            initial-server-port: root.config-server-port;
            initial-upload-chunk-size-mb: root.config-upload-chunk-size-mb;
            
            // Display config
            initial-theme: root.config-theme;
            
            // Storage config
            initial-storage-dir: root.config-storage-dir;
            
            close => {
                root.show-config = false;
            }
            save-config(port, chunk-size, theme, storage-dir) => {
                root.save-config(port, chunk-size, theme, storage-dir);
            }
        }
    }
}
